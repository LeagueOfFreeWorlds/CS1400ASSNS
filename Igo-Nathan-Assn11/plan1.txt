#Requirements:
The program is a simulation of a strange species called "Orbians". When first ran,
the program will display a title menu:
"WELCOME TO ORBIAN FAMILY"
From there, the user has to hit the Enter key (or really any key) to start the orbian
creation menu. The menu is a list of 7 options for the user to choose:
1. "Meet Orbian Family"
    User has the option to see a list of all of the Orbians with their respective
    names.

2. "Compare Orbians"
    User has the option to compare one Orbian's size (volume) with another.

3. "Orbian Info"
    User has the option to see the size (volume), height, and age of their Orbians.

4.  "Create Orbian Baby"
    User has the option to append a new Orbian to the Orbian family by taking the
    characteristics of one Orbian parent, and another.

5. "Send to Pasture"
    User has the option to "retire" an Orbian to a pasture, thereby removing it
    from the list of Orbians within the family.

6. "Orbian Thanos"
    User has the option to kill 50% of the Orbian family population. This option
    will randomly select 50% of the Orbians and remove them from the list.

7. "Quit"
    Program ends.

The menu will continue to print so long as the user has not chosen to quit the
program.

## Analysis:
The program is comprised of two files that run the program. The main file (task1.py)
is responsible for printing the menu, getting user inputs, and displaying results
that the user wants to see. The orbian.py file contains all of the functions and
characteristics of Orbian objects. This includes name, volume, radius and height.
These characteristics are used within the main() so that the user can see and change
the progress of their Orbian family.
As time progresses, the size of the Orbians will change as they get older. Orbian
ages are measured in imaginary units called "zungs," which is equal to 5 seconds.
After an Orbian becomes 2 zungs old (10 seconds), they will have matriculated,
doubling in size, and tripling in height. Afer this, the Orbian doesn't grow or
change anymore.
## Design:
The Orbian family program design is relatively simple. It only has the user as its
input, and time is used to govern the age of the Orbians. From within the menu, the user can see their Orbian family (selecting option 1).
    Orbians are displayed from the Orbian() object list, by using the .getName() method within the Orbian class. getName() will then return the entire names of the orbians within the list:
        Orbian(name, head_radius, body_radius, body_height)
    getName() simply returns the name instances of the Orbian objects, and then concatenated in a print function for the user to see.
Comparing orbians takes the height values of one Orbian object, and another Orbian that a user wishes to compare with, and then uses a __gt__ dunder to compare the height instances of the two Orbians.



# UML ###############
main():
- Menu
- Selection check
- thinking(): display loading animation.



#####################
ORBIAN STARTER:
- Volume of orbians
- Age of orbians
- Name of orbians
- Time of orbian birth

#####################
