"Gronky" Program
# Requirements:
The program is a basic card dealer that gives the user a desired amount of 
cards that they want, shuffled. The cards are also not a standard deck of 
52 cards, as they are instead a unique cardset called 'Gronky,' which
consists of 107 cards, with 17 ranks instead of the typical 13, and with 7 
suits, instead of the typical 4. Furthermore, instead of being called the 
usual "ranks" and "suits," they are called "Titles" and "Gangs."

The program has to be able to shuffle the deck of 107 unique cards, and then
draw the desired amount of cards the user wants to the console. The program
also has to be able to tell the user if they want to have the cards 
reshuffled, or if they wish to quit once they've finished with shuffling.

## Analysis:
The program consists of four files:
    card.py
        - Class that stores all of the card attributes, such as title and
          gang affiliation
    deck.py
        - Class that contains function for the deck that performs shuffling
          of the cards.
    cardmap.py
        - Contains all of the card titles and gangs. 
    main.py (task3.py):
        - Main part of the program that the user interfaces with.
When the user first starts the program, the program will display a prompt
asking: "How many cards do you wish to be dealt?"
The user will then enter a number of the amount of cards they wish to have 
dealt to them. Once the user has entered a number, the program will then 
'shuffle' the deck, as card objects are randomly picked from the deck, and
displayed to the console. 
EXAMPLE:
    "How many cards do you wish to be dealt?    "
    User inputs 5
    "Shuffling Deck......" - Program takes 10 seconds to load.
    [Two Of Elbows, Baker Of Keiths, Baker Of Pollos, Armorer Of Jets, Seven Of Yokels]
    "Would you like the dealer to reshuffle? (Y/n): "
        User can choose to rerun by default pressing Enter. If user types n,
        No, no, NO, or N, the program will quit and write "Thanks for Playing!"
## Design:
The card's  attributes are stored in card.py, as mentioned in the analysis
section of this document, where the card has three functions: 
    1. A function that returns the card's Title.
        - The "title" is similar to "ranks" with a regular deck of 52 cards.
    ************************************
    def getTitle(self):
        return Title[self.__id % 17]
    ************************************
    2. A function that returns the card's gang. The "gang" is similar to a 
    "suits" with a regular deck of 52 cards. 
     ************************************
     def getGang(self):
        return Gang[self.__id // 17]
     ************************************
    3. Returning both the card's Title and Gang, so that the user knows
    both of the card's attributes. 
     ************************************
    def __repr__(self):
        return self.getTitle() + " Of " + self.getGang()
     ************************************
The Title and gangs are all stored within the cardmap.py file, that the card
class uses for assigning to the cards:
    Title = ["One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Baker", "Jester", "Page", "Scribe", "Squire", "Armorer", "Marshall"]
    Gang = ["Jets", "Pollos", "Slugs", "Yokels", "Keiths", "Elbows"]
The deck class is where the cards are randomly selected and added to an empty
array that is later printed to the console for the user to see. As a result
of its randomness, we use the provided random module that python has for
randomly shuffling the deck.

The deck method 'shuffle' is what employs the random module function. When
the deck is called to shuffle, the shuffle method will start by creating an
empty deck list, and then populating it with the entire 102 cards in the 
stack, then finally using the `randint.shuffle` module function to randomly
shuffle the cards on the deck. From there, another method called 'draw()' will
return the last cards on the list using the `.pop()` function: 
     ************************************
    def shuffle(self):
        self.__deck = []
        for i in range(102):
            self.__deck.append(Card(i))
        shuffle(self.__deck)

    def draw(self):
        return self.__deck.pop()
     ************************************
From within the main class, a for loop is used to draw the amount of cards
that the user desires. The loop appends the cards to an empty list that is
printed to the console. The cards appended are from the deck draw() function:

************************************
From within the main class, a for loop is used to draw the amount of cards
dealerAmount = int(input("How many cards do you wish to be dealt?\t"))
print("Shuffling Deck:\t")
thinking()
for i in range(dealerAmount):
    dealerHand.append(deck.draw())
    print(dealerHand)

************************************
## Testing:
Entering negative numbers:
How many cards do you wish to be dealt? -5
Shuffling Deck.....
[Page Of Keiths, Page Of Jets, Three Of Yokels, Armorer Of Elbows, Nine Of Yokels]

Reshuffling deck:
Would you like the dealer to reshuffle? (Y/n): y 
How many cards do you wish to be dealt? 5
Shuffling Deck.......
[Eight Of Keiths, Eight Of Yokels, Two Of Jets]

